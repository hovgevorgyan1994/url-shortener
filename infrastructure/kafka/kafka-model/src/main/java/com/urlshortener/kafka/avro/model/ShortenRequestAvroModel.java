/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.urlshortener.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ShortenRequestAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4539354652989375093L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShortenRequestAvroModel\",\"namespace\":\"com.urlshortener.kafka.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"expiresAat\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"ipAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"zonedDateTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ShortenRequestAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ShortenRequestAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ShortenRequestAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ShortenRequestAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ShortenRequestAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ShortenRequestAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ShortenRequestAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ShortenRequestAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ShortenRequestAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String url;
  private java.time.Instant expiresAat;
  private java.lang.String ipAddress;
  private java.lang.String country;
  private java.time.Instant zonedDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShortenRequestAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param url The new value for url
   * @param expiresAat The new value for expiresAat
   * @param ipAddress The new value for ipAddress
   * @param country The new value for country
   * @param zonedDateTime The new value for zonedDateTime
   */
  public ShortenRequestAvroModel(java.lang.String id, java.lang.String url, java.time.Instant expiresAat, java.lang.String ipAddress, java.lang.String country, java.time.Instant zonedDateTime) {
    this.id = id;
    this.url = url;
    this.expiresAat = expiresAat.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.ipAddress = ipAddress;
    this.country = country;
    this.zonedDateTime = zonedDateTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return url;
    case 2: return expiresAat;
    case 3: return ipAddress;
    case 4: return country;
    case 5: return zonedDateTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: url = value$ != null ? value$.toString() : null; break;
    case 2: expiresAat = (java.time.Instant)value$; break;
    case 3: ipAddress = value$ != null ? value$.toString() : null; break;
    case 4: country = value$ != null ? value$.toString() : null; break;
    case 5: zonedDateTime = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.String getUrl() {
    return url;
  }


  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.String value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'expiresAat' field.
   * @return The value of the 'expiresAat' field.
   */
  public java.time.Instant getExpiresAat() {
    return expiresAat;
  }


  /**
   * Sets the value of the 'expiresAat' field.
   * @param value the value to set.
   */
  public void setExpiresAat(java.time.Instant value) {
    this.expiresAat = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'ipAddress' field.
   * @return The value of the 'ipAddress' field.
   */
  public java.lang.String getIpAddress() {
    return ipAddress;
  }


  /**
   * Sets the value of the 'ipAddress' field.
   * @param value the value to set.
   */
  public void setIpAddress(java.lang.String value) {
    this.ipAddress = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'zonedDateTime' field.
   * @return The value of the 'zonedDateTime' field.
   */
  public java.time.Instant getZonedDateTime() {
    return zonedDateTime;
  }


  /**
   * Sets the value of the 'zonedDateTime' field.
   * @param value the value to set.
   */
  public void setZonedDateTime(java.time.Instant value) {
    this.zonedDateTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new ShortenRequestAvroModel RecordBuilder.
   * @return A new ShortenRequestAvroModel RecordBuilder
   */
  public static com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder newBuilder() {
    return new com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder();
  }

  /**
   * Creates a new ShortenRequestAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShortenRequestAvroModel RecordBuilder
   */
  public static com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder newBuilder(com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder other) {
    if (other == null) {
      return new com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder();
    } else {
      return new com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new ShortenRequestAvroModel RecordBuilder by copying an existing ShortenRequestAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new ShortenRequestAvroModel RecordBuilder
   */
  public static com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder newBuilder(com.urlshortener.kafka.avro.model.ShortenRequestAvroModel other) {
    if (other == null) {
      return new com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder();
    } else {
      return new com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for ShortenRequestAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShortenRequestAvroModel>
    implements org.apache.avro.data.RecordBuilder<ShortenRequestAvroModel> {

    private java.lang.String id;
    private java.lang.String url;
    private java.time.Instant expiresAat;
    private java.lang.String ipAddress;
    private java.lang.String country;
    private java.time.Instant zonedDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.expiresAat)) {
        this.expiresAat = data().deepCopy(fields()[2].schema(), other.expiresAat);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ipAddress)) {
        this.ipAddress = data().deepCopy(fields()[3].schema(), other.ipAddress);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.zonedDateTime)) {
        this.zonedDateTime = data().deepCopy(fields()[5].schema(), other.zonedDateTime);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ShortenRequestAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.urlshortener.kafka.avro.model.ShortenRequestAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.expiresAat)) {
        this.expiresAat = data().deepCopy(fields()[2].schema(), other.expiresAat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ipAddress)) {
        this.ipAddress = data().deepCopy(fields()[3].schema(), other.ipAddress);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.zonedDateTime)) {
        this.zonedDateTime = data().deepCopy(fields()[5].schema(), other.zonedDateTime);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.String getUrl() {
      return url;
    }


    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder setUrl(java.lang.String value) {
      validate(fields()[1], value);
      this.url = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder clearUrl() {
      url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'expiresAat' field.
      * @return The value.
      */
    public java.time.Instant getExpiresAat() {
      return expiresAat;
    }


    /**
      * Sets the value of the 'expiresAat' field.
      * @param value The value of 'expiresAat'.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder setExpiresAat(java.time.Instant value) {
      validate(fields()[2], value);
      this.expiresAat = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'expiresAat' field has been set.
      * @return True if the 'expiresAat' field has been set, false otherwise.
      */
    public boolean hasExpiresAat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'expiresAat' field.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder clearExpiresAat() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ipAddress' field.
      * @return The value.
      */
    public java.lang.String getIpAddress() {
      return ipAddress;
    }


    /**
      * Sets the value of the 'ipAddress' field.
      * @param value The value of 'ipAddress'.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder setIpAddress(java.lang.String value) {
      validate(fields()[3], value);
      this.ipAddress = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ipAddress' field has been set.
      * @return True if the 'ipAddress' field has been set, false otherwise.
      */
    public boolean hasIpAddress() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ipAddress' field.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder clearIpAddress() {
      ipAddress = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder setCountry(java.lang.String value) {
      validate(fields()[4], value);
      this.country = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder clearCountry() {
      country = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'zonedDateTime' field.
      * @return The value.
      */
    public java.time.Instant getZonedDateTime() {
      return zonedDateTime;
    }


    /**
      * Sets the value of the 'zonedDateTime' field.
      * @param value The value of 'zonedDateTime'.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder setZonedDateTime(java.time.Instant value) {
      validate(fields()[5], value);
      this.zonedDateTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'zonedDateTime' field has been set.
      * @return True if the 'zonedDateTime' field has been set, false otherwise.
      */
    public boolean hasZonedDateTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'zonedDateTime' field.
      * @return This builder.
      */
    public com.urlshortener.kafka.avro.model.ShortenRequestAvroModel.Builder clearZonedDateTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ShortenRequestAvroModel build() {
      try {
        ShortenRequestAvroModel record = new ShortenRequestAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.url = fieldSetFlags()[1] ? this.url : (java.lang.String) defaultValue(fields()[1]);
        record.expiresAat = fieldSetFlags()[2] ? this.expiresAat : (java.time.Instant) defaultValue(fields()[2]);
        record.ipAddress = fieldSetFlags()[3] ? this.ipAddress : (java.lang.String) defaultValue(fields()[3]);
        record.country = fieldSetFlags()[4] ? this.country : (java.lang.String) defaultValue(fields()[4]);
        record.zonedDateTime = fieldSetFlags()[5] ? this.zonedDateTime : (java.time.Instant) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ShortenRequestAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<ShortenRequestAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ShortenRequestAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<ShortenRequestAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










